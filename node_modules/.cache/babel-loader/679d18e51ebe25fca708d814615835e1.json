{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/carlos/Documents/ Github Repos/News-Blog-App/src/Components/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { GoogleLogout } from \"react-google-login\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSignedIn, selectUserData, setInput, setSignedIn, setUserData } from \"../Features/userSlice\";\nimport \"../styling/navbar.css\";\n\nconst Navbar = () => {\n  _s();\n\n  // user type in input. This hook is passing '' so it should show the placeholder value on the front end.\n  const [inputValue, setInputValue] = useState(\"\");\n  const isSignedIn = useSelector(selectSignedIn); // this will target the userData in the Homepage\n\n  const userData = useSelector(selectUserData);\n  const dispatch = useDispatch();\n\n  const logout = response => {\n    dispatch(setSignedIn(false));\n    dispatch(setUserData(null));\n  }; // event listener for when the user clicks on the search button.\n\n\n  const handleClick = e => {\n    e.preventDefault();\n    dispatch(setInput(inputValue));\n  }; // this creates the navbar and gives it an <h1> to pass as a logo. Then checks to see if user is signedin and runs the search bar.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"navbar__header\",\n      children: \"CarlosReads \\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), isSignedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog__search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search\",\n        placeholder: \"Search CarlosReads\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        onClick: handleClick,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), isSignedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar__user__data\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: \"user\",\n        src: userData === null || userData === void 0 ? void 0 : userData.imageUrl,\n        alt: userData === null || userData === void 0 ? void 0 : userData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"signedIn\",\n        children: userData === null || userData === void 0 ? void 0 : userData.givenName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogout, {\n        clientId: \"1016698445943-3qi168k97o9vudt73k095ako9uagql6s.apps.googleusercontent.com\",\n        render: renderProps => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: renderProps.onClick,\n          disabled: renderProps.disabled,\n          className: \"logout__button\",\n          children: \"Logout \\uD83D\\uDE26\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this),\n        onLogoutSuccess: logout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"notSignedIn\",\n      children: \"User not available \\uD83D\\uDE1E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Navbar, \"pO25PdSbs3BeD6y21hhatLiVdWk=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/carlos/Documents/ Github Repos/News-Blog-App/src/Components/Navbar.js"],"names":["Avatar","React","useState","GoogleLogout","useDispatch","useSelector","selectSignedIn","selectUserData","setInput","setSignedIn","setUserData","Navbar","inputValue","setInputValue","isSignedIn","userData","dispatch","logout","response","handleClick","e","preventDefault","target","value","imageUrl","name","givenName","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import { Avatar } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { GoogleLogout } from \"react-google-login\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectSignedIn,\n  selectUserData,\n  setInput,\n  setSignedIn,\n  setUserData,\n} from \"../Features/userSlice\";\n\nimport \"../styling/navbar.css\";\n\n\n\n\nconst Navbar = () => {\n// user type in input. This hook is passing '' so it should show the placeholder value on the front end.\n  const [inputValue, setInputValue] = useState(\"\");\n  const isSignedIn = useSelector(selectSignedIn);\n// this will target the userData in the Homepage\n  const userData = useSelector(selectUserData);\n\n  const dispatch = useDispatch();\n\n  const logout = (response) => {\n    dispatch(setSignedIn(false));\n    dispatch(setUserData(null));\n  };\n// event listener for when the user clicks on the search button.\n  const handleClick = (e) => {\n    e.preventDefault();\n    dispatch(setInput(inputValue));\n  };\n\n// this creates the navbar and gives it an <h1> to pass as a logo. Then checks to see if user is signedin and runs the search bar.\n  return (\n    <div className=\"navbar\">\n      <h1 className=\"navbar__header\">CarlosReads ðŸ’¬</h1>\n      {isSignedIn && (\n        <div className=\"blog__search\">\n          <input\n            className=\"search\"\n            placeholder=\"Search CarlosReads\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <button className=\"submit\" onClick={handleClick}>\n            Search\n          </button>\n        </div>\n      )}\n{/* if the user is signedin we want to show the Avatar of the user, that we get from material-ui/core, as well as the logout button.  */}\n      {isSignedIn ? (\n        <div className=\"navbar__user__data\">\n{/* Checks to see if the user has an image that can be used if not it will use the name. When the user is signedIn it will place the name as an h1*/}\n          <Avatar\n            className=\"user\"\n            src={userData?.imageUrl}\n            alt={userData?.name}\n          />\n      {/* this will return the firstname of the user */}\n          <h1 className=\"signedIn\">{userData?.givenName}</h1>\n          <GoogleLogout\n            clientId=\"1016698445943-3qi168k97o9vudt73k095ako9uagql6s.apps.googleusercontent.com\"\n            render={(renderProps) => (\n              <button\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                className=\"logout__button\"\n              >\n                Logout ðŸ˜¦\n              </button>\n            )}\n            onLogoutSuccess={logout}\n          />\n        </div>\n      ) : (\n        <h1 className=\"notSignedIn\">User not available ðŸ˜ž</h1>\n      )}\n    </div>\n  );\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}